{"version":3,"sources":["../../../../../../assets/Script/FrameWork/res/assets/Script/FrameWork/res/ResLoader.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/res","sourcesContent":["import ResKeeper from \"./ResKeeper\";\nimport { ResLeakChecker } from \"./ResLeakChecker\";\n\n/**\n * 资源加载类\n * 1. 加载完成后自动记录引用关系，根据DependKeys记录反向依赖\n * 2. 支持资源使用，如某打开的UI使用了A资源，其他地方释放资源B，资源B引用了资源A，如果没有其他引用资源A的资源，会触发资源A的释放，\n * 3. 能够安全释放依赖资源（一个资源同时被多个资源引用，只有当其他资源都释放时，该资源才会被释放）\n * \n */\n\n// 资源加载的处理回调\nexport type ProcessCallback = (completedCount: number, totalCount: number, item: any) => void;\n// 资源加载的完成回调\nexport type CompletedCallback = (error: Error, resource: any) => void;\nexport type CompletedArrayCallback = (error: Error, resource: any[], urls?: string[]) => void;\n\n// 引用和使用的结构体\nexport interface CacheInfo {\n    refs: Set<string>,\n    uses: Set<string>,\n    useId?: number,\n}\n\n// LoadRes方法的参数结构\nexport interface LoadResArgs {\n    url?: string,\n    urls?: string[],\n    type?: typeof cc.Asset,\n    onCompleted?: (CompletedCallback | CompletedArrayCallback),\n    onProgess?: ProcessCallback,\n    use?: string,\n}\n\n// ReleaseRes方法的参数结构\nexport interface ReleaseResArgs {\n    url?: string,\n    urls?: string[],\n    type?: typeof cc.Asset,\n    use?: string,\n}\n\n// 兼容性处理\nlet isChildClassOf = cc.js[\"isChildClassOf\"]\nif (!isChildClassOf) {\n    isChildClassOf = cc[\"isChildClassOf\"];\n}\n\nlet ccloader: any = cc.loader;\n\nexport default class ResLoader {\n\n    private static _sceneUseKey: string;\n    private _resMap: Map<string, CacheInfo> = new Map<string, CacheInfo>();\n    private _globalUseId: number = 0;\n    private _lastScene: string = null;\n    private _sceneDepends: string[] = null;\n    public resLeakChecker: ResLeakChecker = null;\n\n    public constructor() {\n        // 1. 构造当前场景依赖\n        let scene = cc.director.getScene();\n        if (scene) {\n            this._cacheScene(scene);\n        }\n        // 2. 监听场景切换\n        cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, (scene) => {\n            this._cacheScene(scene);\n        });\n    }\n\n    /**\n     * 从cc.loader中获取一个资源的item\n     * @param url 查询的url\n     * @param type 查询的资源类型\n     */\n    private _getResItem(url: string, type: typeof cc.Asset): any {\n        let item = ccloader._cache[url];\n        if (!item) {\n            let uuid = ccloader._getResUuid(url, type, false);\n            if (uuid) {\n                let ref = ccloader._getReferenceKey(uuid);\n                item = ccloader._cache[ref];\n            }\n        }\n        return item;\n    }\n\n    /**\n     * loadRes方法的参数预处理\n     */\n    public static makeLoadResArgs(): LoadResArgs {\n        if (arguments.length < 1) {\n            console.error(`_makeLoadResArgs error ${arguments}`);\n            return null;\n        }\n\n        let ret: LoadResArgs = {};\n        if (typeof arguments[0] == \"string\") {\n            ret.url = arguments[0];\n        } else if (arguments[0] instanceof Array) {\n            ret.urls = arguments[0];\n        } else {\n            console.error(`_makeLoadResArgs error ${arguments}`);\n            return null;\n        }\n\n        for (let i = 1; i < arguments.length; ++i) {\n            if (i == 1 && isChildClassOf(arguments[i], cc.RawAsset)) {\n                // 判断是不是第一个参数type\n                ret.type = arguments[i];\n            } else if (i == arguments.length - 1 && typeof arguments[i] == \"string\") {\n                // 判断是不是最后一个参数use\n                ret.use = arguments[i];\n            } else if (typeof arguments[i] == \"function\") {\n                // 其他情况为函数\n                if (arguments.length > i + 1 && typeof arguments[i + 1] == \"function\") {\n                    ret.onProgess = arguments[i];\n                } else {\n                    ret.onCompleted = arguments[i];\n                }\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * releaseRes方法的参数预处理\n     */\n    public static makeReleaseResArgs(): ReleaseResArgs {\n        if (arguments.length < 1) {\n            console.error(`_makeReleaseResArgs error ${arguments}`);\n            return null;\n        }\n        let ret: ReleaseResArgs = {};\n        if (typeof arguments[0] == \"string\") {\n            ret.url = arguments[0];\n        } else if (arguments[0] instanceof Array) {\n            ret.urls = arguments[0];\n        } else {\n            console.error(`_makeReleaseResArgs error ${arguments}`);\n            return null;\n        }\n\n        for (let i = 1; i < arguments.length; ++i) {\n            if (typeof arguments[i] == \"string\") {\n                ret.use = arguments[i];\n            } else {\n                ret.type = arguments[i];\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * 生成一个资源使用Key\n     * @param where 在哪里使用，如Scene、UI、Pool\n     * @param who 使用者，如Login、UIHelp...\n     * @param why 使用原因，自定义...\n     */\n    public makeUseKey(where: string, who: string = \"none\", why: string = \"\"): string {\n        return `use_${where}_by_${who}_for_${why}`;\n    }\n\n    /**\n     * 自动生成一个唯一的资源id\n     */\n    public nextUseKey(): string {\n        return `@${++this._globalUseId}`;\n    }\n\n    /**\n     * 获取资源缓存信息\n     * @param key 要获取的资源url\n     */\n    public getCacheInfo(key: string): CacheInfo {\n        if (!this._resMap.has(key)) {\n            this._resMap.set(key, {\n                refs: new Set<string>(),\n                uses: new Set<string>()\n            });\n        }\n        return this._resMap.get(key);\n    }\n\n    /**\n     * 获取资源的url\n     * @param asset \n     */\n    public getUrlByAsset(asset: cc.Asset): string {\n        let checkAsset: any = asset;\n        if (checkAsset && checkAsset._uuid) {\n            return ccloader._getReferenceKey(checkAsset._uuid);;\n        }\n        console.error(`getUrlByAssets error ${asset}`);\n        return null;\n    }\n\n    /**\n     * 为某资源增加一个新的use\n     * @param key 资源的url\n     * @param use 新的use字符串\n     */\n    public addUse(key: string, use: string): boolean {\n        if (this._resMap.has(key)) {\n            let uses = this._resMap.get(key).uses;\n            if (!uses.has(use)) {\n                uses.add(use);\n                if (this.resLeakChecker) {\n                    this.resLeakChecker.logLoad(key, use);\n                }\n                return true;\n            } else {\n                console.warn(`addUse ${key} by ${use} faile, repeating use key`);\n                return false;\n            }\n        }\n        console.warn(`addUse ${key} faile, key nofound, make sure you load with resloader`);\n        return false;\n    }\n\n    private _buildDepend(item: any, refKey: string) {\n        // 反向关联引用（为所有引用到的资源打上本资源引用到的标记）\n        if (item && item.dependKeys && Array.isArray(item.dependKeys)) {\n            for (let depKey of item.dependKeys) {\n                // 记录该资源被我引用\n                let cacheInfo = this.getCacheInfo(depKey);\n                if (!cacheInfo.refs.has(refKey)) {\n                    this.getCacheInfo(depKey).refs.add(refKey);\n                    // cc.log(`${depKey} ref by ${refKey}`);\n                    let ccloader: any = cc.loader;\n                    let depItem = ccloader._cache[depKey]\n                    if (depItem) {\n                        this._buildDepend(depItem, depItem.id);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 缓存一个Item\n     * @param item \n     * @param use \n     */\n    private _cacheItem(item: any, use?: string, stack?: string): boolean {\n        if (item && item.id) {\n            let info = this.getCacheInfo(item.id);\n            if (use) {\n                info.uses.add(use);\n                if (this.resLeakChecker) {\n                    this.resLeakChecker.logLoad(item.id, use, stack);\n                }\n            }\n            if (!info.refs.has(item.id)) {\n                info.refs.add(item.id);\n                this._buildDepend(item, item.id);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 完成一个Item的加载\n     * @param url \n     * @param assetType \n     * @param use \n     */\n    private _finishItem(url: string, assetType: typeof cc.Asset, use?: string, stack?: string) {\n        let item = this._getResItem(url, assetType);\n        if (!this._cacheItem(item, use, stack)) {\n            cc.warn(`addDependKey item error! for ${url}`);\n        }\n    }\n\n    private _releaseSceneDepend() {\n        if (this._sceneDepends) {\n            for (let i = 0; i < this._sceneDepends.length; ++i) {\n                this.releaseRes(this._sceneDepends[i], ResLoader._sceneUseKey);\n            }\n            this._sceneDepends = null;\n        }\n    }\n\n    private _cacheSceneDepend(depends :string[], useKey: string): string[] {\n        for (let i = 0; i < depends.length; ++i) {\n            let item = ccloader._cache[depends[i]];\n            this._cacheItem(item, useKey);\n        }\n        return depends;\n    }\n\n    /**\n     * 缓存场景\n     * @param scene \n     */\n    private _cacheScene(scene: cc.Scene) {\n        // 切换的场景名相同，无需清理资源\n        if (scene.name == this._lastScene) {\n            return;\n        }\n\n        let refKey = ccloader._getReferenceKey(scene.uuid);\n        let item = ccloader._cache[refKey];\n        let newUseKey = `@Scene${this.nextUseKey()}`;\n        let depends: string[] = null;\n        if (item) {\n            depends = this._cacheSceneDepend(item.dependKeys, newUseKey);\n        } else if(scene[\"dependAssets\"]) {\n            depends = this._cacheSceneDepend(scene[\"dependAssets\"], newUseKey);\n        } else {\n            console.error(`cache scene faile ${scene}`);\n            return;\n        }\n        this._releaseSceneDepend();\n        this._lastScene = scene.name;\n        ResLoader._sceneUseKey = newUseKey;\n        this._sceneDepends = depends;\n    }\n\n    /**\n     * 开始加载资源\n     * @param url           资源url\n     * @param type          资源类型，默认为null\n     * @param onProgess     加载进度回调\n     * @param onCompleted   加载完成回调\n     * @param use           资源使用key，根据makeUseKey方法生成\n     */\n    public loadRes(url: string, use?: string);\n    public loadRes(url: string, onCompleted: CompletedCallback, use?: string);\n    public loadRes(url: string, onProgess: ProcessCallback, onCompleted: CompletedCallback, use?: string);\n    public loadRes(url: string, type: typeof cc.Asset, use?: string);\n    public loadRes(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback, use?: string);\n    public loadRes(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedCallback, use?: string);\n    public loadRes() {\n        let resArgs: LoadResArgs = ResLoader.makeLoadResArgs.apply(this, arguments);\n        let stack: string;\n        if (this.resLeakChecker && this.resLeakChecker.checkFilter(resArgs.url)) {\n            stack = ResLeakChecker.getCallStack(1);\n        }\n        console.time(\"loadRes|\" + resArgs.url);\n        let finishCallback = (error: Error, resource: any) => {\n            if (!error) {\n                this._finishItem(resArgs.url, resArgs.type, resArgs.use, stack);\n            }\n            if (resArgs.onCompleted) {\n                resArgs.onCompleted(error, resource);\n            }\n            console.timeEnd(\"loadRes|\" + resArgs.url);\n        };\n\n        // 预判是否资源已加载\n        let res = cc.loader.getRes(resArgs.url, resArgs.type);\n        if (res) {\n            finishCallback(null, res);\n        } else {\n            let ccloader: any = cc.loader;\n            let uuid = ccloader._getResUuid(resArgs.url, resArgs.type, false);\n            if (uuid) {\n                cc.loader.loadRes(resArgs.url, resArgs.type, resArgs.onProgess, finishCallback);\n            } else {\n                cc.loader.load(resArgs.url, resArgs.onProgess, finishCallback);\n            }\n        }\n    }\n\n    public loadArray(urls: string[], use?: string);\n    public loadArray(urls: string[], onCompleted: CompletedArrayCallback, use?: string);\n    public loadArray(urls: string[], onProgess: ProcessCallback, onCompleted: CompletedArrayCallback, use?: string);\n    public loadArray(urls: string[], type: typeof cc.Asset, use?: string);\n    public loadArray(urls: string[], type: typeof cc.Asset, onCompleted: CompletedArrayCallback, use?: string);\n    public loadArray(urls: string[], type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedArrayCallback, use?: string);\n    public loadArray() {\n        let resArgs: LoadResArgs = ResLoader.makeLoadResArgs.apply(this, arguments);\n        let stack: string;\n        if (this.resLeakChecker && this.resLeakChecker.checkFilter(resArgs.url)) {\n            stack = ResLeakChecker.getCallStack(1);\n        }\n        let finishCallback = (error: Error, resource: any[], urls?: string[]) => {\n            if (!error) {\n                for (let i = 0; i < resArgs.urls.length; ++i) {\n                    this._finishItem(resArgs.urls[i], resArgs.type, resArgs.use, stack);\n                }\n            }\n            if (resArgs.onCompleted) {\n                resArgs.onCompleted(error, resource);\n            }\n        }\n        cc.loader.loadResArray(resArgs.urls, resArgs.type, resArgs.onProgess, finishCallback);\n    }\n\n    public loadResDir(url: string, use?: string);\n    public loadResDir(url: string, onCompleted: CompletedArrayCallback, use?: string);\n    public loadResDir(url: string, onProgess: ProcessCallback, onCompleted: CompletedArrayCallback, use?: string);\n    public loadResDir(url: string, type: typeof cc.Asset, use?: string);\n    public loadResDir(url: string, type: typeof cc.Asset, onCompleted: CompletedArrayCallback, use?: string);\n    public loadResDir(url: string, type: typeof cc.Asset, onProgess: ProcessCallback, onCompleted: CompletedArrayCallback, use?: string);\n    public loadResDir() {\n        let resArgs: LoadResArgs = ResLoader.makeLoadResArgs.apply(this, arguments);\n        let stack: string;\n        if (this.resLeakChecker && this.resLeakChecker.checkFilter(resArgs.url)) {\n            stack = ResLeakChecker.getCallStack(1);\n        }\n        let finishCallback = (error: Error, resource: any[], urls?: string[]) => {\n            if (!error && urls) {\n                for (let i = 0; i < urls.length; ++i) {\n                    this._finishItem(urls[i], resArgs.type, resArgs.use, stack);\n                }\n            }\n            if (resArgs.onCompleted) {\n                resArgs.onCompleted(error, resource);\n            }\n        }\n        cc.loader.loadResDir(resArgs.url, resArgs.type, resArgs.onProgess, finishCallback);\n    }\n\n    public releaseArray(urls: string[], use?: string);\n    public releaseArray(urls: string[], type: typeof cc.Asset, use?: string)\n    public releaseArray() {\n        let resArgs: ReleaseResArgs = ResLoader.makeReleaseResArgs.apply(this, arguments);\n        for (let i = 0; i < resArgs.urls.length; ++i) {\n            this.releaseRes(resArgs.urls[i], resArgs.type, resArgs.use);\n        }\n    }\n\n    public releaseResDir(url: string, use?: string);\n    public releaseResDir(url: string, type: typeof cc.Asset, use?: string)\n    public releaseResDir() {\n        let resArgs: ReleaseResArgs = ResLoader.makeReleaseResArgs.apply(this, arguments);\n        let ccloader: any = cc.loader;\n        let urls: string[] = [];\n        ccloader._assetTables.assets.getUuidArray(resArgs.url, resArgs.type, urls);\n        for (let i = 0; i < urls.length; ++i) {\n            this.releaseRes(urls[i], resArgs.type, resArgs.use);\n        }\n    }\n\n    /**\n     * 直接通过asset释放资源（如cc.Prefab、cc.SpriteFrame）\n     * @param asset 要释放的asset\n     */\n    public releaseAsset(asset: any, use?: string) {\n        if (asset && asset._uuid) {\n            let id = ccloader._getReferenceKey(asset._uuid);\n            if (id) {\n                let item = ccloader._cache[id];\n                if (item) {\n                    let cacheInfo = this.getCacheInfo(id);\n                    if (use) {\n                        cacheInfo.uses.delete(use)\n                        if (this.resLeakChecker) {\n                            this.resLeakChecker.logRelease(id, use);\n                        }\n                    }\n                    if (cacheInfo.uses.size == 0) {\n                        this._release(item, id);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 释放资源\n     * @param url   要释放的url\n     * @param type  资源类型\n     * @param use   要解除的资源使用key，根据makeUseKey方法生成\n     */\n    public releaseRes(url: string, use?: string);\n    public releaseRes(url: string, type: typeof cc.Asset, use?: string)\n    public releaseRes() {\n        let resArgs: ReleaseResArgs = ResLoader.makeReleaseResArgs.apply(this, arguments);\n        let item = this._getResItem(resArgs.url, resArgs.type);\n        if (!item) {\n            console.warn(`releaseRes item is null ${resArgs.url} ${resArgs.type}`);\n            return;\n        }\n        // cc.log(arguments);\n        let cacheInfo = this.getCacheInfo(item.id);\n        if (resArgs.use) {\n            cacheInfo.uses.delete(resArgs.use)\n            if (this.resLeakChecker) {\n                this.resLeakChecker.logRelease(item.id, resArgs.use);\n            }\n        }\n\n        if (cacheInfo.uses.size == 0) {\n            this._release(item, item.id);\n        }\n    }\n\n    // 释放一个资源\n    private _release(item, itemUrl) {\n        let cacheInfo = this.getCacheInfo(item.id);\n        if (!item || !cacheInfo.refs.has(itemUrl)) {\n            return;\n        }\n\n        // 解除自身对自己的引用\n        cacheInfo.refs.delete(itemUrl);\n        let ccloader: any = cc.loader;\n        if (cacheInfo.uses.size == 0 && cacheInfo.refs.size == 0) {\n            if (item.dependKeys && Array.isArray(item.dependKeys)) {\n                for (let depKey of item.dependKeys) {\n                    let depItem = ccloader._cache[depKey]\n                    if (depItem) {\n                        this._release(depItem, item.id);\n                    }\n                }\n            }\n\n            //如果没有uuid,就直接释放url\n            if (item.uuid) {\n                cc.loader.release(item.uuid);\n                cc.log(\"resloader release item by uuid :\" + item.id);\n            } else {\n                cc.loader.release(item.id);\n                cc.log(\"resloader release item by url:\" + item.id);\n            }\n            this._resMap.delete(item.id);\n        }\n    }\n\n    private _isSceneDepend(itemUrl) {\n        let scene: any = cc.director.getScene();\n        if (!scene) {\n            return false;\n        }\n        let len = scene.dependAssets.length;\n        for (let i = 0; i < len; ++i) {\n            if (scene.dependAssets[i] == itemUrl)\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * 是否可以释放某资源\n     * @param url \n     * @param use \n     */\n    public canRelease(url: string, use: string): boolean {\n        let cacheInfo = this.getCacheInfo(url);\n        // 有其它Res引用它\n        if (cacheInfo.refs.size > 1 || !cacheInfo.refs.has(url)) return false;\n        // 有其它的Use使用\n        if (cacheInfo.uses.size > 1 || !cacheInfo.uses.has(use)) return false;\n        return true;\n    }\n\n    /**\n     * 判断一个资源能否被释放\n     * @param url 资源url\n     * @param type  资源类型\n     * @param use   要解除的资源使用key，根据makeUseKey方法生成\n     */\n    public checkReleaseUse(url: string, use?: string): boolean;\n    public checkReleaseUse(url: string, type: typeof cc.Asset, use?: string): boolean\n    public checkReleaseUse() {\n        let resArgs: ReleaseResArgs = ResLoader.makeReleaseResArgs.apply(this, arguments);\n        let item = this._getResItem(resArgs.url, resArgs.type);\n        if (!item) {\n            console.log(`cant release,item is null ${resArgs.url} ${resArgs.type}`);\n            return true;\n        }\n\n        let cacheInfo = this.getCacheInfo(item.id);\n        let checkUse = false;\n        let checkRef = false;\n\n        if (resArgs.use && cacheInfo.uses.size > 0) {\n            if (cacheInfo.uses.size == 1 && cacheInfo.uses.has(resArgs.use)) {\n                checkUse = true;\n            } else {\n                checkUse = false;\n            }\n        } else {\n            checkUse = true;\n        }\n\n        if ((cacheInfo.refs.size == 1 && cacheInfo.refs.has(item.id)) || cacheInfo.refs.size == 0) {\n            checkRef = true;\n        } else {\n            checkRef = false;\n        }\n\n        return checkUse && checkRef;\n    }\n}\n\nexport let resLoader: ResLoader = new ResLoader();\n\n"]}