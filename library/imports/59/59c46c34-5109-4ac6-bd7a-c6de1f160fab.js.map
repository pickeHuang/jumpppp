{"version":3,"sources":["../../../../../../assets/Script/FrameWork/UI/assets/Script/FrameWork/UI/UIView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/UI","sourcesContent":["import { resLoader, CompletedCallback } from \"../res/ResLoader\"\n\n/**\n * UIView界面基础类\n * \n * 1. 快速关闭与屏蔽点击的选项配置\n * 2. 界面缓存设置（开启后界面关闭不会被释放，以便下次快速打开）\n * 3. 界面显示类型配置\n * \n * 4. 加载资源接口（随界面释放自动释放），this.loadRes(xxx)\n * 5. 由UIManager释放\n * \n * 5. 界面初始化回调（只调用一次）\n * 6. 界面打开回调（每次打开回调）\n * 7. 界面打开动画播放结束回调（动画播放完回调）\n * 8. 界面关闭回调\n * 9. 界面置顶回调\n */\n\nconst { ccclass, property } = cc._decorator;\n\n/** 界面展示类型 */\nexport enum UIShowTypes {\n    UIFullScreen,       // 全屏显示，全屏界面使用该选项可获得更高性能\n    UIAddition,         // 叠加显示，性能较差\n    UISingle,           // 单界面显示，只显示当前界面和背景界面，性能较好\n};\n\n/** 自动释放配置 */\ninterface autoResInfo {\n    url: string;\n    use?: string;\n    type: typeof cc.Asset;\n};\n\n@ccclass\nexport class UIView extends cc.Component {\n\n    /** 快速关闭 */\n    @property\n    quickClose: boolean = false;\n    /** 屏蔽点击选项 在UIConf设置屏蔽点击*/\n    // @property\n    // preventTouch: boolean = true;\n    /** 缓存选项 */\n    @property\n    cache: boolean = false;\n    /** 界面显示类型 */\n    @property({ type: cc.Enum(UIShowTypes) })\n    showType: UIShowTypes = UIShowTypes.UISingle;\n\n    /** 界面id */\n    public UIid: number = 0;\n    /** 该界面资源占用key */\n    private useKey: string = null;\n    /** 该界面关闭时自动释放的资源 */\n    private autoRes: autoResInfo[] = [];\n    /**  静态变量，用于区分相同界面的不同实例 */\n    private static uiIndex: number = 0;\n\n    /********************** UI的回调 ***********************/\n    /**\n     * 当界面被创建时回调，生命周期内只调用\n     * @param args 可变参数\n     */\n    public init(...args): void {\n\n    }\n\n    /**\n     * 当界面被打开时回调，每次调用Open时回调\n     * @param fromUI 从哪个UI打开的\n     * @param args 可变参数\n     */\n    public onOpen(fromUI: number, ...args): void {\n\n    }\n\n    /**\n     * 每次界面Open动画播放完毕时回调\n     */\n    public onOpenAniOver(): void {\n    }\n\n    /**\n     * 当界面被关闭时回调，每次调用Close时回调\n     * 返回值会传递给下一个界面\n     */\n    public onClose(): any {\n\n    }\n\n    /**\n     * 当界面被置顶时回调，Open时并不会回调该函数\n     * @param preID 前一个ui\n     * @param args 可变参数，\n     */\n    public onTop(preID: number, ...args): void {\n\n    }\n\n    /********************** 资源加载，卸载相关 ***********************/\n    /**\n     * 获取该界面的资源占用key\n     */\n    public getUseKey(): string {\n        if (!this.useKey) {\n            this.useKey = resLoader.makeUseKey(\"UI_\", this.UIid.toString(), `${++UIView.uiIndex}`);\n        }\n        return this.useKey;\n    }\n\n    /**\n     * 加载资源，通过此接口加载的资源会在界面被销毁时自动释放\n     * 如果同时有其他地方引用的资源，会解除当前界面对该资源的占用\n     * @param url 要加载的url\n     * @param type 类型，如cc.Prefab,cc.SpriteFrame,cc.Texture2D\n     * @param onCompleted \n     */\n    public loadRes(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback) {\n        let useStr = this.getUseKey();\n        resLoader.loadRes(url, type, (error: Error, res) => {\n            if (!error) {\n                this.autoRes.push({ url: url, type: type });\n            }\n            onCompleted && onCompleted(error, res);\n        }, useStr);\n    }\n\n    /**\n     * 释放资源，界面销毁时在UIManager中调用\n     */\n    public releaseAutoRes() {\n        for (let index = 0; index < this.autoRes.length; index++) {\n            const element = this.autoRes[index];\n            resLoader.releaseRes(element.url,\n                element.type, element.use || this.getUseKey());\n        }\n    }\n\n    /**\n     * 往一个界面加入一个自动释放的资源\n     * @param resConf 资源url和类型\n     */\n    public autoReleaseRes(resConf: autoResInfo) {\n        this.autoRes.push(resConf);\n    }\n}\n"]}