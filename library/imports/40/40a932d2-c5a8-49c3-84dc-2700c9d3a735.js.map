{"version":3,"sources":["../../../../../../assets/Script/FrameWork/UI/assets/Script/FrameWork/UI/UIManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/UI","sourcesContent":["import { UIView, UIShowTypes } from \"./UIView\";\nimport { resLoader, ProcessCallback } from \"../res/ResLoader\";\n\n/**\n * UIManager界面管理类\n * \n * 1.打开界面，根据配置自动加载界面、调用初始化、播放打开动画、隐藏其他界面、屏蔽下方界面点击\n * 2.关闭界面，根据配置自动关闭界面、播放关闭动画、恢复其他界面\n * 3.切换界面，与打开界面类似，但是是将当前栈顶的界面切换成新的界面（先关闭再打开）\n * 4.提供界面缓存功能\n */\n\n/** UI栈结构体 */\nexport interface UIInfo {\n    uiId: number; \n    uiView: UIView;\n    uiArgs: any;\n    preventNode?: cc.Node;\n    zOrder?: number;\n    openType?: 'quiet' | 'other';\n    isClose?: boolean;\n    resToClear?: string[];\n    resCache?: string[];\n}\n\n/** UI配置结构体 */\nexport interface UIConf {\n    prefab: string;\n    preventTouch?: boolean;\n}\n\nexport class UIManager {\n    /** 资源加载计数器，用于生成唯一的资源占用key */\n    private useCount = 0;\n    /** 背景UI（有若干层UI是作为背景UI，而不受切换等影响）*/\n    private BackGroundUI = 0;\n    /** 是否正在关闭UI */\n    private isClosing = false;\n    /** 是否正在打开UI */\n    private isOpening = false;\n\n    /** UI界面缓存（key为UIId，value为UIView节点）*/\n    private UICache: { [UIId: number]: UIView } = {};\n    /** UI界面栈（{UIID + UIView + UIArgs}数组）*/\n    private UIStack: UIInfo[] = [];\n    /** UI待打开列表 */\n    private UIOpenQueue: UIInfo[] = [];\n    /** UI待关闭列表 */\n    private UICloseQueue: UIView[] = [];\n    /** UI配置 */\n    private UIConf: { [key: number]: UIConf } = {};\n\n    /** UI打开前回调 */\n    public uiOpenBeforeDelegate: (uiId: number, preUIId: number) => void = null;\n    /** UI打开回调 */\n    public uiOpenDelegate: (uiId: number, preUIId: number) => void = null;\n    /** UI关闭回调 */\n    public uiCloseDelegate: (uiId: number) => void = null;\n\n    /**\n     * 初始化所有UI的配置对象\n     * @param conf 配置对象\n     */\n    public initUIConf(conf: { [key: number]: UIConf }): void {\n        this.UIConf = conf;\n    }\n\n    /**\n     * 设置或覆盖某uiId的配置\n     * @param uiId 要设置的界面id\n     * @param conf 要设置的配置\n     */\n    public setUIConf(uiId: number, conf: UIConf): void {\n        this.UIConf[uiId] = conf;\n    }\n\n    /****************** 私有方法，UIManager内部的功能和基础规则 *******************/\n\n    /**\n     * 添加防触摸层\n     * @param zOrder 屏蔽层的层级\n     */\n    private preventTouch(zOrder: number) {\n        let node = new cc.Node()\n        node.name = 'preventTouch';\n        node.setContentSize(cc.winSize);\n        node.on(cc.Node.EventType.TOUCH_START, function (event: cc.Event.EventCustom) {\n            event.stopPropagation();\n        }, node);\n        let child = cc.director.getScene().getChildByName('Canvas');\n        child.addChild(node, zOrder);\n        return node;\n    }\n\n    /** 自动执行下一个待关闭或待打开的界面 */\n    private autoExecNextUI() {\n        // 逻辑上是先关后开\n        if (this.UICloseQueue.length > 0) {\n            let uiQueueInfo = this.UICloseQueue[0];\n            this.UICloseQueue.splice(0, 1);\n            this.close(uiQueueInfo);\n        } else if (this.UIOpenQueue.length > 0) {\n            let uiQueueInfo = this.UIOpenQueue[0];\n            this.UIOpenQueue.splice(0, 1);\n            this.open(uiQueueInfo.uiId, uiQueueInfo.uiArgs);\n        }\n    }\n\n    /**\n     * 自动检测动画组件以及特定动画，如存在则播放动画，无论动画是否播放，都执行回调\n     * @param aniName 动画名\n     * @param aniOverCallback 动画播放完成回调\n     */\n    private autoExecAnimation(uiView: UIView, aniName: string, aniOverCallback: () => void) {\n        // 暂时先省略动画播放的逻辑\n        aniOverCallback();\n    }\n\n    /**\n     * 自动检测资源预加载组件，如果存在则加载完成后调用completeCallback，否则直接调用\n     * @param completeCallback 资源加载完成回调\n     */\n    private autoLoadRes(uiView: UIView, completeCallback: () => void) {\n        // 暂时先省略\n        completeCallback();\n    }\n\n    /** 生成唯一的资源占用key */\n    private makeUseKey(): string {\n        return `UIMgr_${++this.useCount}`;\n    }\n\n    /** 根据界面显示类型刷新显示 */\n    private updateUI() {\n        let hideIndex: number = 0;\n        let showIndex: number = this.UIStack.length - 1;\n        for (; showIndex >= 0; --showIndex) {\n            let mode = this.UIStack[showIndex].uiView.showType;\n            // 无论何种模式，最顶部的UI都是应该显示的\n            this.UIStack[showIndex].uiView.node.active = true;\n            if (UIShowTypes.UIFullScreen == mode) {\n                break;\n            } else if (UIShowTypes.UISingle == mode) {\n                for (let i = 0; i < this.BackGroundUI; ++i) {\n                    if (this.UIStack[i]) {\n                        this.UIStack[i].uiView.node.active = true;\n                    }\n                }\n                hideIndex = this.BackGroundUI;\n                break;\n            }\n        }\n        // 隐藏不应该显示的部分UI\n        for (let hide: number = hideIndex; hide < showIndex; ++hide) {\n            this.UIStack[hide].uiView.node.active = false;\n        }\n    }\n\n    /**\n     * 异步加载一个UI的prefab，成功加载了一个prefab之后\n     * @param uiId 界面id\n     * @param processCallback 加载进度回调\n     * @param completeCallback 加载完成回调\n     * @param uiArgs 初始化参数\n     */\n    private getOrCreateUI(uiId: number, processCallback: ProcessCallback, completeCallback: (uiView: UIView) => void, uiArgs: any): void {\n        // 如果找到缓存对象，则直接返回\n        let uiView: UIView = this.UICache[uiId];\n        if (uiView) {\n            completeCallback(uiView);\n            return;\n        }\n\n        // 找到UI配置\n        let uiPath = this.UIConf[uiId].prefab;\n        if (null == uiPath) {\n            cc.log(`getOrCreateUI ${uiId} faile, prefab conf not found!`);\n            completeCallback(null);\n            return;\n        }\n\n        let useKey = this.makeUseKey();\n        resLoader.loadRes(uiPath, processCallback, (err: Error, prefab: cc.Prefab) => {\n            // 检查加载资源错误\n            if (err) {\n                cc.log(`getOrCreateUI loadRes ${uiId} faile, path: ${uiPath} error: ${err}`);\n                completeCallback(null);\n                return;\n            }\n            // 检查实例化错误\n            let uiNode: cc.Node = cc.instantiate(prefab);\n            if (null == uiNode) {\n                cc.log(`getOrCreateUI instantiate ${uiId} faile, path: ${uiPath}`);\n                completeCallback(null);\n                resLoader.releaseRes(uiPath, cc.Prefab);\n                return;\n            }\n            // 检查组件获取错误\n            uiView = uiNode.getComponent(UIView);\n            if (null == uiView) {\n                cc.log(`getOrCreateUI getComponent ${uiId} faile, path: ${uiPath}`);\n                uiNode.destroy();\n                completeCallback(null);\n                resLoader.releaseRes(uiPath, cc.Prefab);\n                return;\n            }\n            // 异步加载UI预加载的资源\n            this.autoLoadRes(uiView, () => {\n                uiView.init(uiArgs);\n                completeCallback(uiView);\n                uiView.autoReleaseRes({ url: uiPath, type: cc.Prefab, use: useKey });\n            })\n        }, useKey);\n    }\n\n    /**\n     * UI被打开时回调，对UI进行初始化设置，刷新其他界面的显示，并根据\n     * @param uiId 哪个界面被打开了\n     * @param uiView 界面对象\n     * @param uiInfo 界面栈对应的信息结构\n     * @param uiArgs 界面初始化参数\n     */\n    private onUIOpen(uiId: number, uiView: UIView, uiInfo: UIInfo, uiArgs: any) {\n        if (null == uiView) {\n            return;\n        }\n        // 激活界面\n        uiInfo.uiView = uiView;\n        uiView.node.active = true;\n        uiView.node.zIndex = uiInfo.zOrder || this.UIStack.length\n\n        // 快速关闭界面的设置，绑定界面中的background，实现快速关闭\n        if (uiView.quickClose) {\n            let backGround = uiView.node.getChildByName('background');\n            if (!backGround) {\n                backGround = new cc.Node()\n                backGround.name = 'background';\n                backGround.setContentSize(cc.winSize);\n                uiView.node.addChild(backGround, -1);\n            }\n            backGround.targetOff(cc.Node.EventType.TOUCH_START);\n            backGround.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventCustom) => {\n                event.stopPropagation();\n                this.close(uiView);\n            }, backGround);\n        }\n\n        // 添加到场景中\n        let child = cc.director.getScene().getChildByName('Canvas');\n        child.addChild(uiView.node);\n\n        // 刷新其他UI\n        this.updateUI();\n\n        // 从那个界面打开的\n        let fromUIID = 0;\n        if (this.UIStack.length > 1) {\n            fromUIID = this.UIStack[this.UIStack.length - 2].uiId\n        }\n\n        // 打开界面之前回调\n        if (this.uiOpenBeforeDelegate) {\n            this.uiOpenBeforeDelegate(uiId, fromUIID);\n        }\n\n        // 执行onOpen回调\n        uiView.onOpen(fromUIID, uiArgs);\n        this.autoExecAnimation(uiView, \"uiOpen\", () => {\n            uiView.onOpenAniOver();\n            if (this.uiOpenDelegate) {\n                this.uiOpenDelegate(uiId, fromUIID);\n            }\n        });\n    }\n\n    /** 打开界面并添加到界面栈中 */\n    public open(uiId: number, uiArgs: any = null, progressCallback: ProcessCallback = null): void {\n        let uiInfo: UIInfo = {\n            uiId: uiId,\n            uiArgs: uiArgs,\n            uiView: null\n        };\n\n        if (this.isOpening || this.isClosing) {\n            // 插入待打开队列\n            this.UIOpenQueue.push(uiInfo);\n            return;\n        }\n\n        let uiIndex = this.getUIIndex(uiId);\n        if (-1 != uiIndex) {\n            // 重复打开了同一个界面，直接回到该界面\n            this.closeToUI(uiId, uiArgs);\n            return;\n        }\n\n        // 设置UI的zOrder\n        uiInfo.zOrder = this.UIStack.length + 1;\n        this.UIStack.push(uiInfo);\n\n        // 先屏蔽点击\n        if (this.UIConf[uiId].preventTouch) {\n            uiInfo.preventNode = this.preventTouch(uiInfo.zOrder);\n        }\n\n        this.isOpening = true;\n        // 预加载资源，并在资源加载完成后自动打开界面\n        this.getOrCreateUI(uiId, progressCallback, (uiView: UIView): void => {\n            // 如果界面已经被关闭或创建失败\n            if (uiInfo.isClose || null == uiView) {\n                cc.log(`getOrCreateUI ${uiId} faile!\n                        close state : ${uiInfo.isClose} , uiView : ${uiView}`);\n                this.isOpening = false;\n                if (uiInfo.preventNode) {\n                    uiInfo.preventNode.destroy();\n                    uiInfo.preventNode = null;\n                }\n                return;\n            }\n\n            // 打开UI，执行配置\n            this.onUIOpen(uiId, uiView, uiInfo, uiArgs);\n            this.isOpening = false;\n            this.autoExecNextUI();\n        }, uiArgs);\n    }\n\n    /** 替换栈顶界面 */\n    public replace(uiId: number, uiArgs: any = null) {\n        this.close(this.UIStack[this.UIStack.length - 1].uiView);\n        this.open(uiId, uiArgs);\n    }\n\n    /**\n     * 关闭当前界面\n     * @param closeUI 要关闭的界面\n     */\n    public close(closeUI?: UIView) {\n        let uiCount = this.UIStack.length;\n        if (uiCount < 1 || this.isClosing || this.isOpening) {\n            if (closeUI) {\n                // 插入待关闭队列\n                this.UICloseQueue.push(closeUI);\n            }\n            return;\n        }\n\n        let uiInfo: UIInfo;\n        if (closeUI) {\n            for (let index = this.UIStack.length - 1; index >= 0; index--) {\n                let ui = this.UIStack[index];\n                if (ui.uiView === closeUI) {\n                    uiInfo = ui;\n                    this.UIStack.splice(index, 1);\n                    break;\n                }\n            }\n            // 找不到这个UI\n            if (uiInfo === undefined) {\n                return;\n            }\n        } else {\n            uiInfo = this.UIStack.pop();\n        }\n\n        // 关闭当前界面\n        let uiId = uiInfo.uiId;\n        let uiView = uiInfo.uiView;\n        uiInfo.isClose = true;\n\n        // 回收遮罩层\n        if (uiInfo.preventNode) {\n            uiInfo.preventNode.destroy();\n            uiInfo.preventNode = null;\n        }\n\n        if (null == uiView) {\n            return;\n        }\n\n        let preUIInfo = this.UIStack[uiCount - 2];\n        // 处理显示模式\n        this.updateUI();\n        let close = () => {\n            this.isClosing = false;\n            // 显示之前的界面\n            if (preUIInfo && preUIInfo.uiView && this.isTopUI(preUIInfo.uiId)) {\n                // 如果之前的界面弹到了最上方（中间有肯能打开了其他界面）\n                preUIInfo.uiView.node.active = true\n                // 回调onTop\n                preUIInfo.uiView.onTop(uiId, uiView.onClose());\n            } else {\n                uiView.onClose();\n            }\n\n            if (this.uiCloseDelegate) {\n                this.uiCloseDelegate(uiId);\n            }\n            if (uiView.cache) {\n                this.UICache[uiId] = uiView;\n                uiView.node.removeFromParent(false);\n                cc.log(`uiView removeFromParent ${uiInfo.uiId}`);\n            } else {\n                uiView.releaseAutoRes();\n                uiView.node.destroy();\n                cc.log(`uiView destroy ${uiInfo.uiId}`);\n            }\n            this.autoExecNextUI();\n        }\n        // 执行关闭动画\n        this.autoExecAnimation(uiView, \"uiClose\", close);\n    }\n\n    /** 关闭所有界面 */\n    public closeAll() {\n        // 不播放动画，也不清理缓存\n        for (const uiInfo of this.UIStack) {\n            uiInfo.isClose = true;\n            if (uiInfo.preventNode) {\n                uiInfo.preventNode.destroy();\n                uiInfo.preventNode = null;\n            }\n            if (uiInfo.uiView) {\n                uiInfo.uiView.onClose();\n                uiInfo.uiView.releaseAutoRes();\n                uiInfo.uiView.node.destroy();\n            }\n        }\n        this.UIOpenQueue = [];\n        this.UICloseQueue = [];\n        this.UIStack = [];\n        this.isOpening = false;\n        this.isClosing = false;\n    }\n\n    /**\n     * 关闭界面，一直关闭到顶部为uiId的界面，为避免循环打开UI导致UI栈溢出\n     * @param uiId 要关闭到的uiId（关闭其顶部的ui）\n     * @param uiArgs 打开的参数\n     * @param bOpenSelf \n     */\n    public closeToUI(uiId: number, uiArgs: any, bOpenSelf = true): void {\n        let idx = this.getUIIndex(uiId);\n        if (-1 == idx) {\n            return;\n        }\n\n        idx = bOpenSelf ? idx : idx + 1;\n        for (let i = this.UIStack.length - 1; i >= idx; --i) {\n            let uiInfo = this.UIStack.pop();\n            let uiId = uiInfo.uiId;\n            let uiView = uiInfo.uiView;\n            uiInfo.isClose = true\n\n            // 回收屏蔽层\n            if (uiInfo.preventNode) {\n                uiInfo.preventNode.destroy();\n                uiInfo.preventNode = null;\n            }\n\n            if (this.uiCloseDelegate) {\n                this.uiCloseDelegate(uiId);\n            }\n\n            if (uiView) {\n                uiView.onClose()\n                if (uiView.cache) {\n                    this.UICache[uiId] = uiView;\n                    uiView.node.removeFromParent(false);\n                } else {\n                    uiView.releaseAutoRes();\n                    uiView.node.destroy();\n                }\n            }\n        }\n\n        this.updateUI();\n        this.UIOpenQueue = [];\n        this.UICloseQueue = [];\n        bOpenSelf && this.open(uiId, uiArgs);\n    }\n\n    /** 清理界面缓存 */\n    public clearCache(): void {\n        for (const key in this.UICache) {\n            let ui = this.UICache[key];\n            if (cc.isValid(ui.node)) {\n                if (cc.isValid(ui)) {\n                    ui.releaseAutoRes();\n                }\n                ui.node.destroy();\n            }\n        }\n        this.UICache = {};\n    }\n\n    /******************** UI的便捷接口 *******************/\n    public isTopUI(uiId): boolean {\n        if (this.UIStack.length == 0) {\n            return false;\n        }\n        return this.UIStack[this.UIStack.length - 1].uiId == uiId;\n    }\n\n    public getUI(uiId: number): UIView {\n        for (let index = 0; index < this.UIStack.length; index++) {\n            const element = this.UIStack[index];\n            if (uiId == element.uiId) {\n                return element.uiView;\n            }\n        }\n        return null;\n    }\n\n    public getTopUI(): UIView {\n        if (this.UIStack.length > 0) {\n            return this.UIStack[this.UIStack.length - 1].uiView;\n        }\n        return null;\n    }\n\n    public getUIIndex(uiId: number): number {\n        for (let index = 0; index < this.UIStack.length; index++) {\n            const element = this.UIStack[index];\n            if (uiId == element.uiId) {\n                return index;\n            }\n        }\n        return -1;\n    }\n}\n\nexport let uiManager: UIManager = new UIManager();"]}