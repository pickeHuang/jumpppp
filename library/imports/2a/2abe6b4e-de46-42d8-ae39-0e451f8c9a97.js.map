{"version":3,"sources":["../../../../../../assets/Script/FrameWork/res/assets/Script/FrameWork/res/ResKeeper.ts"],"names":[],"mappings":";;;;;AAAA,yCAA2D;AAC3D;;;;;GAKG;AACG,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAA0B,CAAC;AAO3C,CAAC;AAGF;IAAuC,6BAAY;IADnD;QAAA,qEAgDC;QA7CW,aAAO,GAAkB,EAAE,CAAC;;IA6CxC,CAAC;IA5CG;;;;;;OAMG;IACI,2BAAO,GAAd,UAAe,GAAW,EAAE,IAAqB,EAAE,WAA8B;QAAjF,iBAQC;QAPG,IAAI,GAAG,GAAG,qBAAS,CAAC,UAAU,EAAE,CAAC;QACjC,qBAAS,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,UAAC,KAAY,EAAE,GAAG;YAC3C,IAAI,CAAC,KAAK,EAAE;gBACR,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,GAAG,KAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;aACzC;YACD,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAED;;OAEG;IACI,6BAAS,GAAhB;QACI,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,kCAAc,GAArB;QACI,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtD,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpC,qBAAS,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;SAChE;QACD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,kCAAc,GAArB,UAAsB,OAAoB;QACtC,IAAG,qBAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9B;IACL,CAAC;IA9CgB,SAAS;QAD7B,OAAO;OACa,SAAS,CA+C7B;IAAD,gBAAC;CA/CD,AA+CC,CA/CsC,EAAE,CAAC,SAAS,GA+ClD;kBA/CoB,SAAS;AAiD9B;IAAA;IAoBA,CAAC;IAnBG;;;;OAIG;IACI,oBAAY,GAAnB,UAAoB,UAAmB,EAAE,UAAoB;QACzD,IAAI,UAAU,EAAE;YACZ,IAAI,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC7C,IAAI,CAAC,GAAG,EAAE;gBACN,IAAI,UAAU,EAAE;oBACZ,OAAO,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;iBAC7C;qBAAM;oBACH,OAAO,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;iBAC9D;aACJ;YACD,OAAO,GAAG,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,cAAC;AAAD,CApBA,AAoBC,IAAA;AApBY,0BAAO","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/res","sourcesContent":["import { resLoader, CompletedCallback } from \"./ResLoader\";\n/**\n * 资源引用类\n * 1. 提供加载功能，并记录加载过的资源\n * 2. 在node释放时自动清理加载过的资源\n * 3. 支持手动添加记录\n */\nconst { ccclass, property } = cc._decorator;\n\n/** 自动释放配置 */\nexport interface autoResInfo {\n    url: string;\n    use: string;\n    type?: typeof cc.Asset;\n};\n\n@ccclass\nexport default class ResKeeper extends cc.Component {\n\n    private autoRes: autoResInfo[] = [];\n    /**\n     * 加载资源，通过此接口加载的资源会在界面被销毁时自动释放\n     * 如果同时有其他地方引用的资源，会解除当前界面对该资源的占用\n     * @param url 要加载的url\n     * @param type 类型，如cc.Prefab,cc.SpriteFrame,cc.Texture2D\n     * @param onCompleted \n     */\n    public loadRes(url: string, type: typeof cc.Asset, onCompleted: CompletedCallback) {\n        let use = resLoader.nextUseKey();\n        resLoader.loadRes(url, type, (error: Error, res) => {\n            if (!error) {\n                this.autoRes.push({ url, use, type });\n            }\n            onCompleted && onCompleted(error, res);\n        }, use);\n    }\n\n    /**\n     * 组件销毁时自动释放所有keep的资源\n     */\n    public onDestroy() {\n        this.releaseAutoRes();\n    }\n\n    /**\n     * 释放资源，组件销毁时自动调用\n     */\n    public releaseAutoRes() {\n        for (let index = 0; index < this.autoRes.length; index++) {\n            const element = this.autoRes[index];\n            resLoader.releaseRes(element.url, element.type, element.use);\n        }\n        this.autoRes.length = 0;\n    }\n\n    /**\n     * 加入一个自动释放的资源\n     * @param resConf 资源url和类型 [ useKey ]\n     */\n    public autoReleaseRes(resConf: autoResInfo) {\n        if(resLoader.addUse(resConf.url, resConf.use)) {\n            this.autoRes.push(resConf);\n        }\n    }\n}\n\nexport class ResUtil {\n    /**\n     * 从目标节点或其父节点递归查找一个资源挂载组件\n     * @param attachNode 目标节点\n     * @param autoCreate 当目标节点找不到ResKeeper时是否自动创建一个\n     */\n    static getResKeeper(attachNode: cc.Node, autoCreate?: boolean) : ResKeeper {\n        if (attachNode) {\n            let ret = attachNode.getComponent(ResKeeper);\n            if (!ret) {\n                if (autoCreate) {\n                    return attachNode.addComponent(ResKeeper);\n                } else {\n                    return ResUtil.getResKeeper(attachNode.parent, autoCreate);\n                }\n            }\n            return ret;\n        }\n        return null;\n    }\n}\n"]}