{"version":3,"sources":["../../../../../assets/Script/Game/assets/Script/Game/PlayerController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Game","sourcesContent":["import { GameManager } from \"./GameManager\";\n/**\n * \n * 玩家控制类\n * \n * Author  YouxiXiaobai\n * \n * 2020-02-07  \n */\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport class PlayerController extends cc.Component {\n\n    /**移动速度 */\n    @property()\n    private movespeed: number = 0;\n    /** 移动的高度*/\n    @property()\n    private moveheight: number = 0;\n    /** 移动的宽度*/\n    @property()\n    private movewidth: number = 0;\n\n    //跳跃高度\n    @property(cc.Integer)\n    public jumpHeight: number = 180;\n\n    @property(cc.Integer)\n    public jumpDuration: number = 0.3;\n\n    /**接收点击的节点 */\n    private touchnode: cc.Node;\n\n    /**点击的位置 X坐标*/\n    private pointX: number;\n    /**接收点击事件节点的宽 */\n    private touchnodewidth: number;\n\n    private tween: any;\n\n    //是否向左移动，反之向右移动\n    private isMoveLeft: boolean = false;\n\n    //是否在正跳跃\n    private isJumping: boolean = false;\n\n    private nextPlatformLeft: cc.Vec3 = null;\n    private nextPlatformRight: cc.Vec3 = null;\n    private my_Body: cc.RigidBody = null;\n    private isMove: boolean = false;\n\n\n    onLoad() {\n\n        //this.my_Body=this.node.getComponent(cc.RigidBody);\n        this.touchnode = cc.find(\"Canvas/TouchNode\");\n        this.touchnode.on(cc.Node.EventType.TOUCH_START, this.setLeft, this)\n    }\n\n    /** 设置isleft*/\n    private setLeft(event: cc.Event.EventTouch): void {\n\n        console.log(\"aaa\")\n        this.pointX = event.getLocationX();\n        this.touchnodewidth = this.touchnode.width;\n        let centerwidth = this.touchnodewidth / 2;\n\n        if (this.pointX <= centerwidth) {\n            this.isMoveLeft = true;\n            this.node.setScale(new cc.Vec2(-1, 1))\n        }\n        else {\n            this.isMoveLeft = false;\n            this.node.setScale(new cc.Vec2(1, 1))\n        }\n        this.setMoveDir();\n    }\n\n    /**设置移动的方向 */\n    private setMoveDir() {\n\n        this.MovePosition(this.isMoveLeft);\n        GameManager.Instance.AddGameScore();\n    }\n\n    onDestroy() {\n\n        this.touchnode.off(cc.Node.EventType.TOUCH_START, this.setLeft, this);\n    }\n\n    /**移动位置 */\n    public MovePosition(isleft: boolean) {\n\n        if (isleft) {\n\n            console.log(\"往左边动\");\n            let waciton = cc.moveBy(this.movespeed, new cc.Vec2(-this.movewidth, 0));\n            let haction = cc.moveBy(this.movespeed, new cc.Vec2(0, this.moveheight));\n            this.node.runAction(cc.spawn(waciton, haction));\n\n        }\n        else {\n            console.log(\"往右边动\");\n            let waciton = cc.moveBy(this.movespeed, new cc.Vec2(this.movewidth, 0));\n            let haction = cc.moveBy(this.movespeed, new cc.Vec2(0, this.moveheight));\n            this.node.runAction(cc.spawn(waciton, haction));\n\n        }\n        this.Jump();\n    }\n\n\n    private Jump(): void {\n        if (this.isJumping) {\n\n            this.setJumoAction();\n\n        } else {\n            return;\n        }\n    }\n\n    public setJumoAction(): cc.ActionInterval {\n        let jumpUp: cc.ActionInterval = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        let jumpDonw: cc.ActionInterval = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDonw));\n    }\n\n}"]}