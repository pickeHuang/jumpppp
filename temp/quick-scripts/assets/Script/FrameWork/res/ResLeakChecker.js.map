{"version":3,"sources":["ResLeakChecker.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/res","sourcesContent":["\n/**\n * 资源泄露检查类，可以用于跟踪\n * \n * 1. 实例化ResLeakChecker之后，需要先绑定到resLoader中\n * 2. 设置resFilter过滤器可以过滤不需要检测的资源，可用于专门跟踪某资源的使用情况\n * 3. 设置startCheck和stopCheck可动态开启、关闭检测，可用于跟踪某时间段内分配了未释放的资源\n * 4. dump方法可以将收集到的未释放资源打印到控制台\n * 5. getLog可以获取收集到的泄露日志，自己进行打印、上传或存档\n * 6. resetLog方法可以清空泄露日志\n * \n */\n\nexport type FilterCallback = (url: string) => boolean;\n\nexport class ResLeakChecker {\n    public resFilter: FilterCallback = null;\n    private _checking: boolean = false;\n    private _log: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();\n\n    static findCharPos(str: string, cha: string, num: number): number {\n        let x = str.indexOf(cha);\n        let ret = x;\n        for (var i = 0; i < num; i++) {\n            x = str.indexOf(cha, x + 1);\n            if (x != -1) {\n                ret = x;\n            } else {\n                return ret;\n            }\n        }\n        return ret;\n    }\n\n    static getCallStack(popCount: number): string {\n        /*let caller = arguments.callee.caller;\n        let count = Math.min(arguments.callee.caller.length - popCount, 10);\n        let ret = \"\";\n        do {\n            ret = `${ret}${caller.toString()}`;\n            caller = caller && caller.caller;\n            --count;\n        } while (caller && count > 0)*/\n        let ret = (new Error()).stack;\n        let pos = ResLeakChecker.findCharPos(ret, '\\n', popCount);\n        if (pos > 0) {\n            ret = ret.slice(pos);\n        }\n        return ret;\n    }\n\n    public checkFilter(url: string): boolean {\n        if (!this._checking) {\n            return false;\n        }\n        if (this.resFilter) {\n            return this.resFilter(url);\n        }\n        return true;\n    }\n\n    public logLoad(url: string, use: string, stack?: string) {\n        if (!this.checkFilter(url)) {\n            return;\n        }\n        if (!this._log.has(url)) {\n            this._log.set(url, new Map<string, string>());\n        }\n        let urlInfos: Map<string, string> = this._log.get(url);\n        if (urlInfos.has(use)) {\n            console.warn(`ResLeakChecker doubel same use ${url} : ${use}, stack ${urlInfos[use]}`);\n        }\n        urlInfos.set(use, stack ? stack : ResLeakChecker.getCallStack(2));\n    }\n\n    public logRelease(url: string, use: string) {\n        if (!this.checkFilter(url)) {\n            return;\n        }\n        if (!this._log.has(url)) {\n            console.warn(`ResLeakChecker url nofound ${url} : ${use}`);\n            return;\n        }\n        let urlInfos: Map<string, string> = this._log.get(url);\n        if (!urlInfos.has(use)) {\n            console.warn(`ResLeakChecker use nofound ${url} : ${use}`);\n        } else {\n            urlInfos.delete(use);\n        }\n    }\n\n    public startCheck() { this._checking = true; }\n    public stopCheck() { this._checking = false; }\n    public getLog() { return this._log; }\n    public resetLog() {\n        this._log = new Map<string, Map<string, string>>();\n    }\n    public dump() {\n        this._log.forEach((log, url) => {\n            console.log(url);\n            log.forEach((stack, use) => {\n                console.log(`${use} : ${stack}`);\n            });\n        });\n    }\n}\n"]}