{"version":3,"sources":["EventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/FrameWork/Common","sourcesContent":["\n/*\n*   事件管理器，事件的监听、触发、移除\n*   \n*/\n\nexport type EventManagerCallFunc = (eventName: string, eventData: any) => void;\n\ninterface CallBackTarget {\n    callBack: EventManagerCallFunc,\n    target: any,\n}\n\nexport class EventManager {\n    private static instance: EventManager = null;\n    public static getInstance(): EventManager {\n        if (!this.instance) {\n            this.instance = new EventManager();\n        }\n        return this.instance;\n    }\n\n    public static destroy(): void {\n        if (this.instance) {\n            this.instance = null;\n        }\n    }\n\n    private constructor() {\n    }\n\n    private _eventListeners: { [key: string]: CallBackTarget[] } = {};\n\n    private getEventListenersIndex(eventName: string, callBack: EventManagerCallFunc, target?: any): number {\n        let index = -1;\n        for (let i = 0; i < this._eventListeners[eventName].length; i++) {\n            let iterator = this._eventListeners[eventName][i];\n            if (iterator.callBack == callBack && (!target || iterator.target == target)) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    addEventListener(eventName: string, callBack: EventManagerCallFunc, target?: any): boolean {\n        if (!eventName) {\n            cc.warn(\"eventName is empty\" + eventName);\n            return;\n        }\n\n        if (null == callBack) {\n            cc.log('addEventListener callBack is nil');\n            return false;\n        }\n        let callTarget: CallBackTarget = { callBack: callBack, target: target };\n        if (null == this._eventListeners[eventName]) {\n            this._eventListeners[eventName] = [callTarget];\n\n        } else {\n            let index = this.getEventListenersIndex(eventName, callBack, target);\n            if (-1 == index) {\n                this._eventListeners[eventName].push(callTarget);\n            }\n        }\n\n        return true;\n    }\n\n    setEventListener(eventName: string, callBack: EventManagerCallFunc, target?: any): boolean {\n        if (!eventName) {\n            cc.warn(\"eventName is empty\" + eventName);\n            return;\n        }\n\n        if (null == callBack) {\n            cc.log('setEventListener callBack is nil');\n            return false;\n        }\n        let callTarget: CallBackTarget = { callBack: callBack, target: target };\n        this._eventListeners[eventName] = [callTarget];\n        return true;\n    }\n\n    removeEventListener(eventName: string, callBack: EventManagerCallFunc, target?: any) {\n        if (null != this._eventListeners[eventName]) {\n            let index = this.getEventListenersIndex(eventName, callBack, target);\n            if (-1 != index) {\n                this._eventListeners[eventName].splice(index, 1);\n            }\n        }\n    }\n\n    raiseEvent(eventName: string, eventData?: any) {\n        console.log(`==================== raiseEvent ${eventName} begin | ${JSON.stringify(eventData)}`);\n        if (null != this._eventListeners[eventName]) {\n            // 将所有回调提取出来，再调用，避免调用回调的时候操作了事件的删除\n            let callbackList: CallBackTarget[] = [];\n            for (const iterator of this._eventListeners[eventName]) {\n                callbackList.push({ callBack: iterator.callBack, target: iterator.target });\n            }\n            for (const iterator of callbackList) {\n                iterator.callBack.call(iterator.target, eventName, eventData);\n            }\n        }\n        console.log(`==================== raiseEvent ${eventName} end`);\n    }\n}\n\nexport let EventMgr = EventManager.getInstance();"]}